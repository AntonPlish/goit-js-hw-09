{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAqBA,SAASC,EAAcC,EAAeC,GACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEhC,IAAIC,QADFH,EACUI,IACVC,YAAW,KACTC,EAAAX,GAASY,OAAOC,QAAQ,uBAAqBV,QAAsBC,SAClEA,IAGOU,IACVJ,YAAW,KACTC,EAAAX,GAASY,OAAOG,QAAQ,sBAAoBZ,QAAsBC,SACjEA,KA/BAY,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAES,MAATC,EAAeF,EAAMG,cAAcC,SACnCC,EAAaC,SAASJ,EAAajB,MAAMsB,OACzCC,EAAYF,SAASJ,EAAaO,KAAKF,OACvCvB,EAAgBsB,SAASJ,EAAaQ,OAAOH,OACnD,IAAIE,EAAOJ,EAEX,IAAK,IAAIM,EAAI,EAAGA,GAAK3B,EAAe2B,GAAK,EACvC5B,EAAc4B,EAAGF,GACjBA,GAAcD","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\n  \nfunction onFormSubmit(event) {\n  event.preventDefault();\n  // console.dir(event.currentTarget); // виведення об`єкту\n  const formElements = event.currentTarget.elements;\n  const inputDelay = parseInt(formElements.delay.value);\n  const inputStep = parseInt(formElements.step.value);\n  const inputPosition = parseInt(formElements.amount.value);\n  let step = inputDelay;\n\n  for (let i = 1; i <= inputPosition; i += 1) {\n    createPromise(i, step);\n    step = step + inputStep;\n  };\n};\n\nfunction createPromise(inputPosition, delay) {\n  const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        new Promise(resolve => {\n          setTimeout(() => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${inputPosition} in ${delay}ms`);\n          }, delay);\n        });\n      } else {\n        new Promise(reject => {\n          setTimeout(() => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${inputPosition} in ${delay}ms`);\n          }, delay);\n        });\n  };\n};\n\n\n// ------------------------------------------------- Alternate code ---------------------------------------------------------\n\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve({\n//         position: position,\n//         delay: delay,\n//       });\n//     } else {\n//       reject({\n//         position: position,\n//         delay: delay,\n//       });\n//     }\n//   });\n// }\n\n// const form = document.querySelector('.form');\n// form.addEventListener('submit', onFormSubmit);\n\n// function onFormSubmit(e) {\n//   e.preventDefault();\n\n//   let {\n//     elements: { delay, step, amount },\n//   } = e.target;\n\n//   delayValue = Number(delay.value);\n//   stepValue = Number(step.value);\n\n//   for (let i = 1, delay = delayValue; i <= amount.value; i += 1, delay += stepValue) {\n//     setTimeout(() => {\n//       createPromise(i, delay)\n//         .then(({ position, delay }) => {\n//           Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         .catch(({ position, delay }) => {\n//           Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//         });\n//     }, delay);\n//   }\n// }"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","inputPosition","delay","shouldResolve","Math","random","Promise","resolve","setTimeout","$parcel$interopDefault","Notify","success","reject","failure","document","querySelector","addEventListener","event","preventDefault","formElements","currentTarget","elements","inputDelay","parseInt","value","inputStep","step","amount","i"],"version":3,"file":"03-promises.0f486a5a.js.map"}